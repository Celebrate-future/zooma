{"version":3,"sources":["Navbar.tsx","components/ResultsTable.tsx","api/ZoomaApi.tsx","api/ZoomaDatasources.tsx","components/Modal.tsx","components/DragAndDropLists.tsx","components/DatasourcesModal.tsx","pages/Home.tsx","pages/docs/index.tsx","pages/about.tsx","Main.tsx","components/EBI.tsx","App.tsx","index.tsx"],"names":["Navbar","props","loc","useLocation","id","className","small","medium","to","title","src","data-description","pathname","startsWith","ResultsTable","state","data-icon","this","results","map","result","getResultClass","propertyType","propertyValue","ontologyTermLabel","mappingConfidence","ontologyTermID","Datasource","datasources","uri","datasource","Component","undefined","loadedOntologyURIs","indexOf","name","uriNameMap","get","href","target","style","height","alt","source","sources","filter","s","url","linkTo","logo","apiUrl","search","params","onProgress","a","requiredSources","length","join","preferredSources","ontologySources","fetch","method","body","JSON","stringify","properties","credentials","headers","status","progress","parseFloat","delay","finalRes","json","data","row","ontologyTermSynonyms","ontologyURI","res","text","ms","Promise","rej","setTimeout","getDatasources","ZoomaDatasources","datasourceNames","searchableOntoNames","ontologyPrefixes","nameDescriptionMap","Map","nameTitleMap","type","db","databases","push","desc","set","description","Modal","children","DragAndDropLists","onDragEnd","destination","listsCopy","lists","l","entries","slice","console","log","index","sourceId","parseInt","droppableId","split","destId","list","splice","sourceList","onChange","i","provided","snapshot","display","verticalAlign","ref","innerRef","isDraggingOver","background","padding","width","overflowY","overflowX","item","key","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","margin","content","placeholder","DatasourcesModal","onDatasourceListsChanged","unrankedDatasources","rankedDatasources","newConfig","datasourceConfig","d","onConfigChanged","onSelectOntology","val","setState","ontoAutocomplete","onDone","tab","ds","isActive","onClick","e","aria-selected","getItemValue","shouldItemRender","value","toLowerCase","inputProps","items","renderItem","isHighlighted","onSelect","React","Home","onEditQuery","newValue","prevState","query","onClickAnnotate","line","tokens","searchParams","searching","ZoomaApi","onClickClear","onClickShowExamples","examples","onClickDatasources","showDatasourceModal","onDatasourceConfigChanged","config","onDatasourcesModalDone","loadDatasources","doNotSearchDatasources","doNotSearchOntologies","orderOnSmall","minHeight","marginRight","disabled","Blurb","docs","cursor","About","Main","exact","path","component","Docs","EBIMasthead","EBIFooter","App","ReactDOM","render","document","getElementById","window"],"mappings":"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","file":"static/js/main.13b9d669.chunk.js","sourcesContent":["\nimport { Row, Column } from 'react-foundation'\nimport { Link, useLocation } from \"react-router-dom\";\nimport * as React from 'react'\n\nexport interface NavProps {\n}\n\nexport default function Navbar(props:NavProps) {\n\n    let loc = useLocation()\n\n    return (\n        <header id=\"masthead\" className=\"masthead ontotools-masthead\">\n            <Row className=\"masthead-inner\">\n                <Column small={12} medium={12} id=\"local-title\">\n                    <h1>\n                        <Link to=\"/\" title=\"Back to ZOOMA homepage\">\n                            <img className=\"ontotools-logo\" src=\"/images/zooma_logo_new.png\" />\n                        </Link>\n                    </h1>\n                </Column>\n                <nav>\n                    <ul id=\"local-nav\" className=\"dropdown menu float-left\" data-description=\"navigational\">\n\n                        <li className={loc.pathname === '/' ? 'active' : ''}>\n                            <Link to=\"/\">\n                                Home\n                            </Link>\n                        </li>\n\n                        <li className={loc.pathname === '/sparql' ? 'active' : ''}>\n                            <Link to=\"/sparql\">\n                                Explore\n                            </Link>\n                        </li>\n\n                        <li className={loc.pathname.startsWith('/docs') ? 'active' : ''}>\n                            <Link to=\"/docs\">\n                                Help\n                            </Link>\n                        </li>\n\n                        <li className={loc.pathname === '/about' ? 'active' : ''}>\n                            <Link to=\"/about\">\n                                About\n                            </Link>\n                        </li>\n                    </ul>\n                </nav>\n            </Row>\n        </header>\n    )\n}\n\n","\nimport React, { Component, Fragment, ChangeEvent } from \"react\"\nimport { Row, Column } from \"react-foundation\"\nimport * as ZoomaApi from \"../api/ZoomaApi\"\nimport { ZoomaDatasources } from \"../api/ZoomaDatasources\"\nimport { sources } from '../data/sources.json'\n\ninterface Props {\n    results:ZoomaApi.SearchResult[]\n    datasources:ZoomaDatasources|undefined\n}\n\ninterface State {\n}\n\nexport default class ResultsTable extends Component<Props, State> {\n\n    constructor(props:any) {\n        super(props)\n\n        this.state = {\n        }\n    }\n\n    render() {\n\n        return (\n            <table>\n                <thead>\n                    <tr>\n                        <th className=\"context-help\">\n                            <span className=\"context-help-label clickable\" data-icon=\"?\">Term Type </span>\n                        </th>\n                        <th className=\"context-help\">\n                            <span className=\"context-help-label clickable\" data-icon=\"?\">Term Value </span>\n                        </th>\n                        <th className=\"context-help\">\n                            <span className=\"context-help-label clickable\" data-icon=\"?\">Ontology Class Label </span>\n                        </th>\n                        <th className=\"context-help\">\n                            <span className=\"context-help-label clickable\" data-icon=\"?\">Mapping Confidence </span>\n                        </th>\n                        <th className=\"context-help\">\n                            <span className=\"context-help-label clickable\" data-icon=\"?\">Ontology Class ID </span>\n                        </th>\n                        <th className=\"context-help\">\n                            <span className=\"context-help-label clickable\" data-icon=\"?\">Source </span>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                    this.props.results.map(result =>\n                        <tr className={getResultClass(result)}>\n                            <td>{result.propertyType}</td>\n                            <td>{result.propertyValue}</td>\n                            <td>{result.ontologyTermLabel}</td>\n                            {/* <td>{result.ontologyTermSynonyms}</td> */}\n                            <td>{result.mappingConfidence}</td>\n                            <td>{result.ontologyTermID}</td>\n                            <td><Datasource datasources={this.props.datasources} uri={result.datasource}/></td>\n                            {/* <td>{result.ontologyIRI}</td> */}\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n        )\n    }\n\n}\n\nfunction Datasource(props:any) {\n\n    let { datasources, uri } = props\n\n    if(datasources === undefined) {\n        return <span>{uri}</span>\n    }\n\n    if(datasources.loadedOntologyURIs.indexOf(uri) !== -1) {\n\n        let name = datasources.uriNameMap.get(uri)\n\n        return (\n            <a href={'//www.ebi.ac.uk/ols/ontologies/' + name} target=\"_blank\">\n                <img src=\"images/ols-logo.jpg\" style={{height: '20px'}} alt={name} />\n                &nbsp;\n                { name }\n            </a>\n        )\n    }\n\n    let source = sources.filter(s => s.url === uri)[0]\n    \n    if(source !== undefined) {\n\n        return (\n            <a href={source.linkTo} target=\"_blank\">\n                <img src={source.logo} style={{height: '20px'}} alt={source.name} />\n                &nbsp;\n                { source.name }\n            </a>\n        )\n    }\n\n    return (\n        <span>{uri}</span>\n        // <a href={source.linkTo}>\n        //     <img src={source.logo} />\n        //     {source.name}\n        // </a>\n    )\n}\n\nfunction getResultClass(result) {\n\n    return ({\n        'High': 'automatic',\n        'Good': 'curation',\n        'Medium': 'curation',\n        'Low': 'curation'\n    })[result.mappingConfidence] || 'unmapped'\n\n}\n\n\n\n","\nlet apiUrl = 'https://www.ebi.ac.uk/spot/zooma/v2/api'\n\nexport interface SearchProperty {\n}\n\nexport interface SearchParams {\n    properties: { \n        propertyValue: string\n        propertyType: string\n    }[]\n    requiredSources:string[]\n    preferredSources:string[]\n    ontologySources:string[]\n}\n\n    /*\n     [0] - property type\n     [1] - property value\n     [2] - matched ontology term label\n     [3] - matched ontology term synonyms\n     [4] - mapping confidence\n     [5] - matched ontology term \"ID\" (i.e. fragment)\n     [6] - matched ontology URI\n     [7] - datasource\n     */\n\nexport interface SearchResult {\n    propertyType:string\n    propertyValue:string\n    ontologyTermLabel:string\n    ontologyTermSynonyms:string\n    mappingConfidence:string\n    ontologyTermID:string\n    ontologyURI:string\n    datasource:string\n}\n\nexport interface Datasource {\n    type:string\n    name:string\n    longName:string|undefined\n    description:string\n    uri:string\n    title:string\n}\n\nexport async function search(params:SearchParams, onProgress:(pc:number)=>void) {\n\n    let filter = ''\n\n    if(params.requiredSources.length > 0) {\n        filter += 'required:[' + params.requiredSources.join(',') + ']'\n    }\n\n    if(params.preferredSources.length > 0) {\n        filter += 'preferred:[' + params.preferredSources.join(',') + ']'\n    }\n\n    if(params.ontologySources.length > 0) {\n        filter += 'ontologies:[' + params.ontologySources.join(',') + ']'\n    }\n\n    let submitRes = await fetch(apiUrl + '/map?' + filter, {\n        method: 'POST',\n        body: JSON.stringify(params.properties),\n        credentials: 'include',\n\n        headers: {\n            'content-type': 'application/json'\n        }\n    })\n\n    for(;;) {\n\n        let progress = await status()\n\n        onProgress(parseFloat(progress))\n\n        if(progress === '1.0') {\n            break\n        }\n\n        await delay(1000)\n    }\n\n    let finalRes = await fetch(apiUrl + '/map?json', {\n        method: 'GET'\n    })\n\n    let body = await finalRes.json()\n\n    return body.data.map((row:any) => {\n\n        return {\n            propertyType: row[0],\n            propertyValue: row[1],\n            ontologyTermLabel: row[2],\n            ontologyTermSynonyms: row[3],\n            mappingConfidence: row[4],\n            ontologyTermID: row[5],\n            ontologyURI: row[6],\n            datasource: row[7]\n        } as SearchResult\n    })\n}\n\nasync function status():Promise<string> {\n\n    let res = await fetch(apiUrl + '/status', {\n        method: 'GET'\n    })\n\n    return await res.text()\n}\n\n\nasync function delay(ms:number) {\n    return new Promise((res, rej) => {\n        setTimeout(res, ms)\n    })\n}\n","\n\nimport * as ZoomaApi from './ZoomaApi'\n\nimport { databases } from '../data/databases.json'\n\nlet apiUrl = 'https://www.ebi.ac.uk/spot/zooma/v2/api'\n\nexport async function getDatasources():Promise<ZoomaDatasources> {\n\n    let res = await fetch(apiUrl + '/sources', {\n        method: 'GET'\n    })\n\n    let sources = (await res.json()) as ZoomaApi.Datasource[]\n\n    return new ZoomaDatasources(sources)\n}\n\nexport class ZoomaDatasources {\n\n    datasourceNames:string[] = []\n    searchableOntoNames:string[] = []\n    ontologyPrefixes:string[] = []\n    loadedOntologyURIs:string[] = []\n    nameDescriptionMap:Map<string,string> = new Map()\n    nameTitleMap:Map<string,string> = new Map()\n    uriNameMap:Map<string,string> = new Map()\n\n    constructor(sources:ZoomaApi.Datasource[]) {\n\n        for(let source of sources) {\n\n            if(source.type === 'DATABASE') {\n\n                let db = databases[source.name]\n\n                if(db !== undefined) {\n                    this.datasourceNames.push(db.name)\n                    this.nameDescriptionMap[source.name] = db.desc\n                } else {\n                    this.datasourceNames.push(source.name)\n                    this.nameDescriptionMap[source.name] = 'No description.'\n                }\n\n                this.uriNameMap[source.uri] = source.name\n\n            } else if(source.type === 'ONTOLOGY') {\n                this.searchableOntoNames.push(source.title + ' (' + source.name + ')')\n                this.ontologyPrefixes.push(source.name)\n                this.loadedOntologyURIs.push(source.uri)\n                this.nameDescriptionMap.set(source.name, source.description)\n                this.uriNameMap.set(source.uri, source.name)\n            }\n        }\n\n    }\n}\n\n","\n\nimport React, { Component } from \"react\"\n\ninterface Props {\n    title:string\n}\n\ninterface State {\n}\n\nexport default class Modal extends Component<Props, State> {\n\n    constructor(props:any) {\n        super(props)\n\n        this.state = {\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"modal-outer\">\n                <div className=\"modal-inner\">\n                    <div className=\"modal-title\">\n                        <h1>{this.props.title}</h1>\n                    </div>\n                    <div className=\"modal-body\">\n                        {this.props.children}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n","\n\n\n/// Adapted from https://codesandbox.io/s/ql08j35j3q\n/// Source: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/about/examples.md\n\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging:any, draggableStyle:any) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid,\n    margin: `0 0 ${grid}px 0`,\n\n    // change background colour if dragging\n    background: isDragging ? '#ccc' : '#ddd',\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n});\n\nconst getListStyle = (isDraggingOver:any) => ({\n    background: isDraggingOver ? '#ccffcc' : 'white',\n    padding: grid,\n    width: 250,\n    height: '300px',\n    overflowY: 'scroll' as any,\n    overflowX: 'none' as any\n});\n\nexport interface ListEntry {\n    id:string\n    content:string\n}\n\nexport interface List {\n    title:string\n    entries:ListEntry[]\n}\n\ninterface Props {\n    lists:List[]\n    onChange:(lists:List[])=>void\n}\n\ninterface State {\n}\n\n\nexport default class DragAndDropLists extends Component<Props, State> {\n\n    onDragEnd = (result:any) => {\n        const { source, destination } = result;\n\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n\n        let listsCopy:List[] = this.props.lists.map(l => ({ title: l.title, entries: l.entries.slice(0) }))\n\n        console.log('source ' + source.index + ' dest ' + destination.index)\n\n        let sourceId = parseInt(source.droppableId.split('-')[1])\n        let destId = parseInt(destination.droppableId.split('-')[1])\n\n        if (sourceId === destId) {\n\n            let list = listsCopy[sourceId]\n            list.entries.splice(destination.index, 0, list.entries.splice(source.index, 1)[0]);\n\n        } else {\n\n            let sourceList = listsCopy[sourceId]\n            let destList = listsCopy[destId]\n\n            destList.entries.splice(destination.index, 0, sourceList.entries.splice(source.index, 1)[0]);\n        }\n\n        this.props.onChange(listsCopy);\n    };\n\n    render() {\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                {\n                    this.props.lists.map((list, i) => \n                        <Droppable droppableId={'droppable-' + i}>\n                        {(provided, snapshot) => (\n                            <div style={{display: 'inline-block', verticalAlign: 'top'}}>\n                                <h4>{list.title}</h4>\n                            <div\n                                ref={provided.innerRef}\n                                style={getListStyle(snapshot.isDraggingOver)}>\n                                {list.entries.map((item, index) => {\n                                    return <Draggable\n                                        key={item.id}\n                                        draggableId={item.id}\n                                        index={index}>\n                                        {(provided, snapshot) => (\n                                            <div\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                                style={getItemStyle(\n                                                    snapshot.isDragging,\n                                                    provided.draggableProps.style\n                                                )}>\n                                                {item.content}\n                                            </div>\n                                        )}\n                                    </Draggable>\n                                })}\n                                {provided.placeholder}\n                            </div>\n                            </div>\n                        )}\n                    </Droppable>\n                    )\n                }\n            </DragDropContext>\n        );\n    }\n}\n","\n\n\nimport * as React from 'react'\nimport { Row, Column, Tabs, TabItem, TabsContent, TabPanel } from \"react-foundation\"\nimport * as ZoomaApi from \"../api/ZoomaApi\"\nimport { ZoomaDatasources } from \"../api/ZoomaDatasources\"\nimport { sources } from '../data/sources.json'\nimport Modal from './Modal'\nimport classNames from 'classnames'\nimport DragAndDropLists, { List, ListEntry } from \"./DragAndDropLists\"\nimport { ZoomaDatasourceConfig } from \"../api/ZoomaDatasourceConfig\"\nimport Autocomplete from 'react-autocomplete'\n\ninterface Props {\n    datasources:ZoomaDatasources\n    datasourceConfig:ZoomaDatasourceConfig\n    onConfigChanged:(config:ZoomaDatasourceConfig)=>void\n    onDone:()=>void\n}\n\ninterface State {\n    tab:'curated'|'ontology'\n    ontoAutocomplete:string\n}\n\nexport default class DatasourcesModal extends React.Component<Props, State> {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            tab: 'curated',\n            ontoAutocomplete: ''\n        }\n    }\n\n    render() {\n\n        let { tab } = this.state\n\n        let { datasources, datasourceConfig } = this.props\n\n        let lists = [\n            { \n                title: 'Unranked',\n                entries: datasourceConfig.unrankedDatasources.map(ds => ({ id: ds, content: ds })),\n            },\n            {\n                title: 'Ranked',\n                entries: datasourceConfig.rankedDatasources.map(ds => ({ id: ds, content: ds }))\n            }\n        ]\n\n        return (\n            <Modal title=\"Configure Datasources\">\n                {/* <div className=\"tabs-content\">\n                <ul className=\"tabs\" data-tabs>\n                    <li className={classNames('tabs-title', {'is-active': tab === 'curated'} )}><a>Curated Datasources</a></li>\n                    <li className={classNames('tabs-title', {'is-active': tab === 'ontology'} )}><a>Ontology Sources</a></li>\n                </ul>\n                </div>\n                <div className=\"tabs-panel\">\n                    <p>\n                    test\n                    </p>\n                </div>\n                <button className=\"button\">Done</button> */}\n                <Tabs>\n                    <TabItem isActive={tab === 'curated'} onClick={(e) => { this.setState({ tab: 'curated' }) }}>\n                        <a href={'#curated'} aria-selected={tab === 'curated'}>Curated Datasources</a>\n                    </TabItem>\n                    <TabItem isActive={tab === 'ontology'} onClick={(e) => { this.setState({ tab: 'ontology' }) }}>\n                        <a href={'#ontology'} aria-selected={tab === 'ontology'}>Ontology Sources</a>\n                    </TabItem>\n\t\t\t\t</Tabs>\n\t\t\t\t<TabsContent>\n\t\t\t\t\t<TabPanel id={'curated'} isActive={tab === 'curated'}>\n                        <label>\n                            <input type=\"checkbox\"/>\n                            Don't search in any datasources\n                        </label>\n                        <DragAndDropLists lists={lists} onChange={this.onDatasourceListsChanged}/>\n                    </TabPanel>\n\t\t\t\t\t<TabPanel id={'ontology'} isActive={tab === 'ontology'}>\n                        <label>\n                            <input type=\"checkbox\"/>\n                            Don't search in any ontologies\n                            <br/>\n                            <Autocomplete\n                                getItemValue={(item) => item}\n                                shouldItemRender={(item, value) => item.toLowerCase().indexOf(value.toLowerCase()) > -1}\n                                inputProps={{\n                                    placeholder: 'Search ontologies by name, e.g. EFO or Experimental Factor Ontology',\n                                    style:{ width: '500px', padding: '8px'}\n                                }}\n                                items={datasources.searchableOntoNames}\n                                renderItem={(item, isHighlighted) =>\n                                    <div style={{ background: isHighlighted ? 'lightgray' : 'white', padding: '8px' }}>\n                                        {item}\n                                    </div>\n                                }\n                                value={this.state.ontoAutocomplete}\n                                onChange={(e, val) => this.setState((s) => ({ ...s, ontoAutocomplete: val }))}\n                                onSelect={this.onSelectOntology}\n                            />\n                            {\n                                <ul>\n                                {datasourceConfig.ontologySources.map(source => {\n                                    return <li key={source}>\n                                        <input type=\"checkbox\"/>\n                                        {source}\n                                    </li>\n                                })}\n                                </ul>\n                            }\n                        </label>\n                    </TabPanel>\n\t\t\t\t</TabsContent>\n                <br/>\n                <button className=\"button\" onClick={this.onDone}>Done</button>\n            </Modal>\n        )\n    }\n\n    onDatasourceListsChanged = (lists:List[]) => {\n\n        let [ unrankedDatasources, rankedDatasources ] = lists\n\n        let newConfig:ZoomaDatasourceConfig = {\n            ...this.props.datasourceConfig,\n            unrankedDatasources: unrankedDatasources.entries.map(d => d.id),\n            rankedDatasources: rankedDatasources.entries.map(d => d.id)\n         }\n\n        this.props.onConfigChanged(newConfig)\n    }\n\n    onSelectOntology = (val) => {\n\n        let newConfig:ZoomaDatasourceConfig = {\n            ...this.props.datasourceConfig,\n            // ontologySources: [\n         }\n\n\n        this.setState((s) => ({ ...s, ontoAutocomplete: '' }))\n    }\n\n    onDone = () => {\n        this.props.onDone()\n    }\n\n}\n\n","import { EBIMasthead, EBIFooter } from \"../components/EBI\";\nimport ZoomaNav from \"../Navbar\";\nimport { Fragment, Component, ChangeEvent } from \"react\";\nimport { Row, Column, Callout } from 'react-foundation'\nimport ResultsTable from \"../components/ResultsTable\";\nimport * as ZoomaApi from '../api/ZoomaApi'\nimport { getDatasources, ZoomaDatasources } from \"../api/ZoomaDatasources\";\nimport { runInThisContext } from \"vm\";\nimport DatasourcesModal from \"../components/DatasourcesModal\";\nimport { ZoomaDatasourceConfig } from \"../api/ZoomaDatasourceConfig\";\nimport * as React from 'react'\n\ninterface Props {\n}\n\ninterface State {\n  datasources:ZoomaDatasources|undefined\n  datasourceConfig:ZoomaDatasourceConfig|undefined\n  showDatasourceModal:boolean\n  query:string\n  searching: boolean,\n  progress:number\n  results:ZoomaApi.SearchResult[]\n}\n\nexport default class Home extends Component<Props, State> {\n\n    constructor(props:Props) {\n      super(props)\n\n      this.state = {\n        datasources: undefined,\n        datasourceConfig: undefined,\n        showDatasourceModal: false,\n        query: '',\n        searching: false,\n        progress: 0,\n        results: []\n      }\n    }\n\n    componentDidMount() {\n\n      this.loadDatasources()\n\n\n    }\n\n    async loadDatasources() {\n\n      let datasources = await getDatasources()\n\n      let datasourceConfig:ZoomaDatasourceConfig = {\n        doNotSearchDatasources: false,\n        unrankedDatasources: datasources.datasourceNames,\n        rankedDatasources: [],\n\n        doNotSearchOntologies: false,\n        ontologySources: []\n      }\n\n      this.setState(prevState => ({ ...prevState, datasources, datasourceConfig }))\n\n    }\n\n    render() {\n\n        return (\n            <main>\n              {\n                this.state.showDatasourceModal &&\n                this.state.datasources &&\n                this.state.datasourceConfig &&\n                <DatasourcesModal datasources={this.state.datasources} datasourceConfig={this.state.datasourceConfig} onConfigChanged={this.onDatasourceConfigChanged} onDone={this.onDatasourcesModalDone} />\n              }\n              <Row>\n                <Column small={12} medium={6} orderOnSmall={1}>\n                  <Row>\n                    <Column small={6} medium={6}>\n                        <Row>\n                        What's this?\n                        </Row>\n                    </Column>\n                    <Column small={6} medium={6}>\n                        <Row className=\"align-right\">\n                            <a onClick={this.onClickShowExamples}>\n                                Show me some examples...\n                            </a>\n                        </Row>\n                    </Column>\n                  </Row>\n                  <Row>\n                          <textarea style={{minHeight: '300px'}} value={this.state.query} onChange={this.onEditQuery}></textarea>\n                  </Row>\n                  <Row className=\"align-right\">\n                      <button className=\"button\" onClick={this.onClickDatasources} style={{marginRight: 'auto'}}>\n                        <span className=\"icon icon-functional\" data-icon='s'></span>\n                        &nbsp; Datasources\n                        </button>\n                      <button className=\"button\" onClick={this.onClickAnnotate}>Annotate</button>\n                      &nbsp;\n                      <button className=\"button secondary\"\n                          disabled={this.state.results.length === 0}\n                          onClick={this.onClickClear}>Clear</button>\n                  </Row>\n                </Column>\n                <Column small={12} medium={6} orderOnSmall={2}>\n                  <Blurb />\n                </Column>\n              </Row>\n              <Row>\n                <Column small={12} medium={12}>\n                  <h3>Results</h3>\n                  <p>The table below shows a report describing how ZOOMA annotates text terms supplied above.</p>\n                  <ResultsTable results={this.state.results} datasources={this.state.datasources} />\n                </Column>\n              </Row>\n            </main>\n        )\n    }\n\n    onEditQuery = (e:ChangeEvent) => {\n        let newValue = (e.target as any).value\n        this.setState(prevState => ({ ...prevState, query: newValue }))\n    }\n\n    onClickAnnotate = async () => {\n\n      let properties = this.state.query\n            .split('\\n')\n            .map(line => line.split('\\t'))\n            .map(tokens => ({ propertyValue: tokens[0], propertyType: tokens[1] }))\n\n      let searchParams:ZoomaApi.SearchParams = {\n          properties,\n          requiredSources: [],\n          preferredSources: [],\n          ontologySources: []\n      }\n\n      this.setState(prevState => ({ ...prevState, searching: true }))\n\n      let results = await ZoomaApi.search(searchParams, (progress:number) => {\n        this.setState(prevState => ({ ...prevState, progress }))\n      })\n\n      this.setState(prevState => ({ ...prevState, searching: false, results }))\n    }\n\n    onClickClear = () => {\n      this.setState(prevState => ({ ...prevState, query: '', results: [] }))\n    }\n\n    onClickShowExamples = () => {\n      this.setState(prevState => ({ ...prevState, query: examples }))\n    }\n\n    onClickDatasources = () => {\n      this.setState(prevState => ({ ...prevState, showDatasourceModal: true }))\n    }\n\n    onDatasourceConfigChanged = (config:ZoomaDatasourceConfig) => {\n      this.setState(prevState => ({ ...prevState, datasourceConfig: config }))\n    }\n\n    onDatasourcesModalDone = () => {\n      this.setState(prevState => ({ ...prevState, showDatasourceModal: false }))\n    }\n}\n\nfunction Blurb() {\n  return (\n      <Callout>\n        <p>Zooma is a tool for mapping free text annotations to ontology term based on a curated repository of annotation knowledge.</p>\n        <p>Where mappings are not found in the curated respository one or more ontologies can be selected from the Ontology Lookup Service to increase coverage. For example if you want to map GWAS annotations select the GWAS datasource and a common disease ontology such as EFO or DOID to maximise coverage when terms have no curated mappings.</p>\n        <p>Use the text box to find possible ontology mappings for free text terms in the ZOOMA repository of curated annotation knowledge. You can add one term (e.g. 'Homo sapiens') per line. If you also have a type for your term (e.g. 'organism'), put this after the term, separated by a tab. \nIf you are new to ZOOMA, take a look at our getting started guide.</p>\n      </Callout>\n  )\n}\n\nvar examples =\n`Bright nuclei\nAgammaglobulinemia 2\\tphenotype\nReduction in IR-induced 53BP1 foci in HeLa\\tcell\nImpaired cell migration with increased protrusive activity\\tphenotype\nC57Black/6\\tstrain\nnuclei stay close together\nRetinal cone dystrophy 3B\\tdisease\nsegregation problems/chromatin bridges/lagging chromosomes/multiple DNA masses\nSegawa syndrome autosomal recessive\\tphenotype\nBRCA1\\tgene\nDeafness, autosomal dominant 17\\tphenotype\ncooked broccoli\\tcompound\nAmyloidosis, familial visceral\\tphenotype\nSpastic paraplegia 10\\tphenotype\nEpilepsy, progressive myoclonic 1B\\tphenotype\nBig cells\nCardiomyopathy, dilated, 1S\\tphenotype\nLong QT syndrome 3/6, digenic\\tdisease\nLung adenocarcinoma disease\\tstate\ndoxycycline 130 nanomolar\\tcompound\nleft tibia\\torganism\\tpart\nCD4-positive\ncerebellum\\torganism\\tpart\nhematology traits\\tgwas\\ttrait\nnifedipine 0.025 micromolar\\tcompound\nMicrotubule clumps\n`","import { Link } from 'react-router-dom'\nimport React, { Fragment } from \"react\";\nimport { Row } from \"react-foundation\";\nimport { EBIMasthead, EBIFooter } from \"../../components/EBI\";\nimport ZoomaNav from \"../../Navbar\";\n\n\nexport default function docs() {\n    return (\n            <main>\n                <Row>\n                    <Link to=\"/docs/search\">\n                        <div style={{cursor: 'pointer'}}>\n                            <h2>Searching ZOOMA</h2>\n                            <p>Check here for an overview on how to use Zooma, and how to search for ontology mappings given metadata descriptions</p>\n                        </div>\n                    </Link>\n                </Row>\n                <Row>\n                    <Link to=\"/docs/api\">\n                        <div style={{cursor: 'pointer'}}>\n                            <h2>Developer API</h2>\n                            <p>Zooma developer documentation, including how to code tools against the Zooma REST API.</p>\n                        </div>\n                    </Link>\n                </Row>\n            </main>\n    )\n}","import { EBIMasthead } from \"../components/EBI\";\nimport ZoomaNav from \"../Navbar\";\nimport React, { Fragment } from \"react\";\nimport { Row, Column } from 'react-foundation'\n\nexport default function About() {\n\n  return(\n      <main>\n        <div className=\"row\">\n          <div className=\"columns medium-12 padding-top-large\">\n            <h3>About ZOOMA</h3>\n            <p>\n              ZOOMA is an application for discovering optimal ontology mappings, developed by the <a\n                href=\"//www.ebi.ac.uk/about/spot-team\">Samples, Phenotypes and Ontologies Team</a> at EBI.\n                It can be used to automatically annotate &quot;properties&quot; (plain text, descriptive values about\n                biological entities) with &quot;semantic tags&quot; (ontology classes).\n            </p>\n\n            <p>\n              If you are new to ZOOMA, take a look at our <a href=\"./docs/getting-started.html\">getting started\n                                                                                                guide</a>.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"columns medium-12\">\n            <h4>Background</h4>\n\n            <p>\n              ZOOMA was developed by the Samples, Phenotypes and Ontologies Team at the EBI. We help a number of\n              groups and databases annotate their data to ontologies, including\n                <a href=\"//www.ebi.ac.uk/gxa\"\n                target=\"_blank\"><span className=\"external\">Expression Atlas</span></a>,\n                <a href=\"//www.targetvalidation.org\"\n                target=\"_blank\"><span className=\"external\">Open Targets</span></a>, the\n                <a href=\"//www.ebi.ac.uk/gwas\" target=\"_blank\"><span className=\"external\">GWAS Catalog</span></a>\n                and\n                many others. This means we handle a wide variety of diverse datasets that contain metadata\n                descriptions\n                about species, anatomical components, cell types, drugs treatments and compounds, diseases and\n                phenotypes and many others.\n            </p>\n\n            <p>\n              To support richer querying, we assist with the annotation of these metadata descriptions to a series\n              of\n              ontologies, allowing us to harmonise data across experiments to drive advanced searches and improve\n              data\n              visualisation. Generating such annotations is a manually intensive operation that requires\n              considerable\n              curation. And, as ontologies evolve and new technologies for performing functional genomics\n              experiments\n              emerge, annotations need reviewing and improving. We call the difference between the data we have\n              submitted, and the data that is accurately mapped to ontology terms, an <b>&quot;annotation gap&quot;</b>.\n            </p>\n\n            <p>\n              ZOOMA exists to reduce this annotation gap through automatic annotation. ZOOMA contains a linked\n              data\n              repository of annotation knowledge and highly annotated data that has been seeded with manually\n              curated\n              annotation derived from publicly available databases, such as the Expression Atlas, as well as other\n              sources.\n              By creating this repository of annotations, tracking their provenance and scoring their quality, we\n              have\n              been able to build a &quot;smart&quot; annotation search service. Because the source data has been curated by\n              hand, it is a rich source of knowledge that is optimised for this task of semantic mark-up of\n              keywords,\n              in contrast with text-mining approaches. It is also capable of capturing more obscure types of\n              annotations such as those involving compound properties.\n            </p>\n\n            <p>\n              The Samples, Phenotypes and Ontologies Team is also responsible for the development and maintainence\n              of\n                the Experimental Factor Ontology (<a href=\"//www.ebi.ac.uk/efo\"\n                target=\"_blank\"><span className=\"external\">EFO</span></a>) and the\n                Ontology Lookup Service (<a href=\"//www.ebi.ac.uk/ols\" target=\"_blank\">OLS</a>). If\n                you'd like to know more about ontologies, need new know where to find or request terms to describe\n                your\n                data, or would just like some information, check out the EFO or OLS websites, or have a look at our\n                <a\n                href=\"//www.ebi.ac.uk/about/spot-team\"\n                target=\"_blank\">SPOT homepage</a>. Alternatively, you can get in touch using the contact\n                details\n                below.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"columns medium-12\">\n            <h3>Why use ZOOMA?</h3>\n\n            <p>\n              You should use ZOOMA if you have data that has been described with any series of keywords. ZOOMA\n              provides a mechanism to search for these keywords, using typing or context information or\n              combinations\n              of co-occuring keywords to improve accuracy, and automatically annotate your data to ontology terms.\n            </p>\n\n            <p>\n              Using ZOOMA, it is trivially easy to automatically annotate any data that has been richly described\n              previously. This improves the interoperability of your data, but also frees up curators to work on\n              more\n              difficult and interesting tasks, rather than spending time making the same old fixes and corrections\n              to\n              align data with the current state of the art in ontologies.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"columns medium-12\">\n            <h3>Contact</h3>\n\n            <p>For questions and to provide feedback, please contact\n                <a href=\"mailto:ontology-tools-support@ebi.ac.uk\">ontology-tools-support@ebi.ac.uk</a>.\n            </p>\n\n            <p>For bug reports and feature requests, please use our\n                <a href=\"//www.ebi.ac.uk/panda/jira/browse/FGPTO/component/10874\"\n                target=\"_blank\"><span className=\"external\">JIRA bug tracker</span></a>.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"columns medium-12\">\n            <h3>Privacy Policy</h3>\n\n            <p>The General Data Protection Regulation (GDPR) will apply in the UK from 25 May 2018. It will replace the 1998 Data Protection Act and introduce new rules on privacy notices, as well as processing and safeguarding personal data.</p>\n\n            <p>\n              This website requires cookies, and the limited processing of your personal data in order to function. By using the site you are agreeing to this as outlined in our <a href=\"//www.ebi.ac.uk/data-protection/privacy-notice/embl-ebi-public-website\">Privacy Notice</a> and <a href=\"//www.ebi.ac.uk/about/terms-of-use\">Terms of Use</a>.\n            </p>\n\n            <p>\n              <a href=\"//www.ebi.ac.uk/data-protection/privacy-notice/zooma\">Zooma Submission Service</a> applies to the data submitted to Zooma (eg. data to ontology annotations) via the zooma-submission@ebi.ac.uk e-mail address.\n            </p>\n\n            <p>\n              <a href=\"//www.ebi.ac.uk/data-protection/privacy-notice/zooma-mailing-list\">Zooma Mail Service</a> applies to our public e-mail list ontology-tools-support [at] ebi.ac.uk.\n            </p>\n          </div>\n        </div>\n\n\n        <div className=\"row\">\n          <div className=\"columns medium-12\">\n            <h3>Thanks</h3>\n\n            <p>\n              <a href=\"//atlassian.com/software/bamboo/overview\">Bamboo</a>: Continuous integration,\n                                                                                    continuous\n                                                                                    deployment and release management.\n            </p>\n\n            <p>\n              <a href=\"//atlassian.com/software/fisheye/overview\">Fisheye</a>: Browse, search and track your\n                                                                                    source code repositories.\n            </p>\n\n            <p>\n              <a href=\"//www.jetbrains.com/idea/index.html\">IntelliJ IDEA</a> is the full-featured commercial\n                                                                                        IDE\n                                                                                        — with a complete set of tools\n                                                                                        and\n                                                                                        integrations with the most\n                                                                                        important modern technologies\n                                                                                        and\n                                                                                        frameworks, such as Spring and\n                                                                                        Hibernate — a must-have for\n                                                                                        effective Web and Java EE\n                                                                                        development.\n            </p>\n\n            <p>\n              YourKit is kindly supporting open source projects with its full-featured Java Profiler. YourKit, LLC\n              is\n              the creator of innovative and intelligent tools for profiling Java and .NET applications. Take a\n              look at\n                YourKit's leading software products: <a href=\"//www.yourkit.com/java/profiler/index.jsp\">YourKit\n              Java\n                                                                                                                Profiler</a>\n                and <a href=\"//www.yourkit.com/.net/profiler/index.jsp\">YourKit .NET Profiler</a>.\n            </p>\n\n          </div>\n        </div>\n\n      </main>\n\n  )\n\n}\n","import * as React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Docs from './pages/docs'\nimport About from './pages/about'\n\nexport default function Main() {\n  return (\n    <Switch>\n      <Route exact path='/' component={Home}></Route>\n      <Route exact path='/docs' component={Docs}></Route>\n      <Route exact path='/about' component={About}></Route>\n    </Switch>\n  );\n}\n\n","\nimport React, { Fragment, Component } from \"react\"\n\nexport function EBIMasthead() {\n    return (\n        <header id=\"masthead-black-bar\" className=\"clearfix masthead-black-bar\">\n        </header>\n    )\n}\n\nexport function EBIFooter() {\n    return (\n        <footer>\n            <div id=\"global-footer\" className=\"global-footer\">\n            <nav id=\"global-nav-expanded\" className=\"global-nav-expanded row\">\n            </nav>\n            <section id=\"ebi-footer-meta\" className=\"ebi-footer-meta row\">\n            </section>\n            </div>\n        </footer>\n    )\n}\n\n\n","\nimport * as React from 'react'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport { EBIFooter, EBIMasthead } from './components/EBI';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <EBIMasthead/>\n      <Navbar />\n      <Main />\n      <EBIFooter/>\n    </div>\n  );\n}","\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as React from 'react'\nimport App from './App'\n\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  ), document.getElementById('root')\n);\n\nwindow['ebiFrameworkInvokeScripts']()\n\n\n"],"sourceRoot":""}